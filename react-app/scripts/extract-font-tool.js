#!/usr/bin/env node

/**
 * Extract Font Tool for Standalone Deployment
 *
 * This script extracts the font-tool build artifacts into a separate
 * directory that can be deployed independently from the main game.
 */

import { readdir, readFile, writeFile, mkdir, rm } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { existsSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const DIST_DIR = join(__dirname, '..', 'dist');
const OUTPUT_DIR = join(__dirname, '..', 'dist-font-tool');

async function extractFontTool() {
  console.log('üé® Extracting Font Atlas Generator for standalone deployment...\n');

  // Clean output directory
  if (existsSync(OUTPUT_DIR)) {
    console.log('üßπ Cleaning previous build...');
    await rm(OUTPUT_DIR, { recursive: true, force: true });
  }

  // Create output directory structure
  await mkdir(OUTPUT_DIR, { recursive: true });
  await mkdir(join(OUTPUT_DIR, 'assets'), { recursive: true });

  // Copy font-tool.html
  console.log('üìÑ Copying font-tool.html...');
  const htmlContent = await readFile(join(DIST_DIR, 'font-tool.html'), 'utf-8');

  // Update paths in HTML to work from root
  const updatedHtml = htmlContent
    .replace(/href="\//g, 'href="./')
    .replace(/src="\//g, 'src="./');

  await writeFile(join(OUTPUT_DIR, 'index.html'), updatedHtml);

  // Find and copy font-tool assets
  console.log('üì¶ Copying font-tool assets...');
  const assetsDir = join(DIST_DIR, 'assets');
  const assets = await readdir(assetsDir);

  let copiedCount = 0;

  for (const asset of assets) {
    // Only copy assets used by font-tool
    if (asset.includes('font-tool') || asset.includes('index')) {
      const content = await readFile(join(assetsDir, asset));
      await writeFile(join(OUTPUT_DIR, 'assets', asset), content);
      copiedCount++;
      console.log(`  ‚úì ${asset}`);
    }
  }

  // Copy favicon (optional)
  const faviconPath = join(DIST_DIR, 'vite.svg');
  if (existsSync(faviconPath)) {
    console.log('üéØ Copying favicon...');
    const favicon = await readFile(faviconPath);
    await writeFile(join(OUTPUT_DIR, 'vite.svg'), favicon);
  }

  // Calculate total size
  const files = await readdir(OUTPUT_DIR, { recursive: true });
  let totalSize = 0;

  for (const file of files) {
    try {
      const stats = await readFile(join(OUTPUT_DIR, file));
      totalSize += stats.length;
    } catch (e) {
      // Skip directories
    }
  }

  // Create README
  console.log('üìù Creating deployment README...');
  const readme = `# Font Atlas Generator - Standalone Build

This directory contains a standalone deployment of the Font Atlas Generator.

## üì¶ Contents

- \`index.html\` - Main entry point (renamed from font-tool.html)
- \`assets/\` - JavaScript and CSS bundles
- \`vite.svg\` - Favicon (optional)

## üöÄ Deployment

This build is ready to deploy to any static hosting service:

### GitHub Pages

1. Push this directory to the \`gh-pages\` branch:
   \`\`\`bash
   cd dist-font-tool
   git init
   git add .
   git commit -m "Deploy Font Atlas Generator"
   git push -f origin HEAD:gh-pages
   \`\`\`

2. Enable GitHub Pages in your repository settings

### Netlify

1. Drag and drop this entire folder to https://app.netlify.com/drop
2. Or use Netlify CLI:
   \`\`\`bash
   npx netlify deploy --prod --dir=dist-font-tool
   \`\`\`

### Vercel

\`\`\`bash
npx vercel --prod dist-font-tool
\`\`\`

### Any Static Host (FTP/SFTP)

Upload all files in this directory to your web server's public directory.

## üåê Access

Once deployed, users can access the tool at:
- \`https://your-domain.com/\` (if deployed to root)
- \`https://your-domain.com/font-tool/\` (if deployed to subdirectory)

## üìä Build Info

- **Build Date:** ${new Date().toISOString()}
- **Total Size:** ${(totalSize / 1024).toFixed(2)} KB
- **Files:** ${files.length}

## üé® Features

- Upload TTF/OTF fonts
- Auto-detect character widths
- Pixel-perfect rendering
- Export PNG + YAML definitions
- Full-screen workspace
- No server required (100% client-side)

---

Generated by: npm run build:font-tool
`;

  await writeFile(join(OUTPUT_DIR, 'README.md'), readme);

  // Create .nojekyll for GitHub Pages (prevents Jekyll processing)
  await writeFile(join(OUTPUT_DIR, '.nojekyll'), '');

  console.log('\n‚úÖ Font Atlas Generator extracted successfully!\n');
  console.log(`üìç Location: ${OUTPUT_DIR}`);
  console.log(`üìä Total Size: ${(totalSize / 1024).toFixed(2)} KB`);
  console.log(`üìÅ Files: ${files.length}`);
  console.log('\nüöÄ Ready to deploy! See README.md for deployment instructions.\n');
}

// Run
extractFontTool().catch(err => {
  console.error('‚ùå Error extracting font tool:', err);
  process.exit(1);
});
